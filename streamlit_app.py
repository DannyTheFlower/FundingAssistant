import streamlit as st, requests, pandas as pd, datetime as dt, altair as alt


BASE = "http://localhost:8000/api"

weightings = {
    "equal": "–†–∞–≤–Ω—ã–µ –≤–µ—Å–∞",
    "market_cap": "–ü–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏",
    "cap_freefloat": "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è √ó Free‚Äëfloat",
    "cap_divyield": "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è √ó –î–∏–≤–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
}
weightings_inv = {v: k for k, v in weightings.items()}
metrics_map = {
    "ytd": "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞ (YTD)",
    "annual_return": "–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
    "annual_vol": "–ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å",
    "sharpe": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞",
    "mdd": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (MDD)",
    "VaR_95": "VaR 95% (—Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—å)",
    "corr": "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å IMOEX",
    "beta": "–ë–µ—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ IMOEX",
    "te": "–¢—Ä–µ–∫-–æ—à–∏–±–∫–∞ (Tracking Error)",
    "ir": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (Information Ratio)"
}
for k, v in {"report_ready": False, "report_bytes":  None}.items():
    st.session_state.setdefault(k, v)

st.set_page_config(page_title="MOEX Index Lab", layout="wide")
tabs = st.tabs(["üõ†Ô∏è–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤", "üîÆ–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"])

with tabs[0]:
    st.title("üìà–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ MOEX")

    st.subheader("–ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å")
    query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é", placeholder="MOEX_Utilities")
    if st.button("üîç –ù–∞–π—Ç–∏"):
        r = requests.get(f"{BASE}/index/indices", params={"q": query})
        if r.ok:
            res_df = pd.DataFrame(r.json())
            if res_df.empty:
                st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                st.dataframe(res_df[["id", "name", "base_date", "weighting"]])
        else:
            st.error(r.text)

    st.markdown("---")

    st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å")

    colY, colQ = st.columns(2)
    Y = colY.number_input("–ì–æ–¥", value=dt.date.today().year, step=1)
    Q = colQ.selectbox("–ö–≤–∞—Ä—Ç–∞–ª", [1, 2, 3, 4], index=0)

    if "securities_df" not in st.session_state:
        st.session_state["securities_df"] = pd.DataFrame(columns=["ID", "Name"])

    if st.button("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –±—É–º–∞–≥‚Ä¶"):
            r = requests.get(f"{BASE}/securities", params={"year": Y, "quarter": Q})
            r.raise_for_status()
            st.session_state["securities_df"] = pd.DataFrame(r.json(), columns=["ID", "Name"])

    if not st.session_state["securities_df"].empty:
        df_sec = st.session_state["securities_df"]
        choices = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–º–∞–≥–∏:",
            options=[f"{row.ID} ‚Äì {row.Name}" for row in df_sec.itertuples()],
        )
        selected_ids = [c.split(" ‚Äì ")[0] for c in choices]

        index_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞", placeholder="My_Dividend_Stars")
        w_type_human = st.selectbox("–¢–∏–ø –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è", list(weightings_inv), 1)
        w_type = weightings_inv[w_type_human]
        base_date = st.date_input("–ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞", value=dt.date(Y, Q * 3 - 2, 1))

        if st.button("–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å üéâ", disabled=not selected_ids):
            payload = {
                "name": index_name,
                "base_date": str(base_date),
                "weighting": w_type,
                "securities": [{"secid": s} for s in selected_ids],
            }
            res = requests.post(f"{BASE}/index", json=payload)
            if res.ok:
                info = res.json()
                st.session_state["index_id"] = info["id"]
                st.success(f"–ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω, ID={info['id']}, –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ={info['base_value']:.2f}")
            else:
                st.error(res.text)

    if "index_id" in st.session_state:
        colF, colT = st.columns(2)
        d_from = colF.date_input("–°", value=dt.date.today() - dt.timedelta(days=30))
        d_till = colT.date_input("–ü–æ", value=dt.date.today())
        if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É"):
            with st.spinner("–†–∞—Å—á—ë—Ç‚Ä¶"):
                s = requests.get(
                    f"{BASE}/index/{st.session_state['index_id']}/series",
                    params={"from": str(d_from), "till": str(d_till)},
                )
                if s.ok and s.json():
                    df = pd.DataFrame(s.json())
                    df["date"] = pd.to_datetime(df["date"])
                    df = df.set_index("date")

                    left, right = st.columns(2)

                    left.subheader(st.session_state.get("index_name", "–í–∞—à –∏–Ω–¥–µ–∫—Å"))
                    left.line_chart(
                        df[["value"]].rename(columns={"value": st.session_state.get("index_name", "index")}),
                        use_container_width=True
                    )

                    right.subheader("IMOEX")
                    right.line_chart(
                        df[["imoex"]].rename(columns={"imoex": "IMOEX"}),
                        use_container_width=True
                    )
                else:
                    st.warning(s.text)

    if "index_id" in st.session_state:
        if st.button("–ü–∞—Å–ø–æ—Ä—Ç –∏–Ω–¥–µ–∫—Å–∞"):
            r = requests.get(f"{BASE}/index/{st.session_state['index_id']}/stats")
            if r.ok:
                stats = r.json()

                with st.expander("–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", expanded=True):
                    col1, col2, col3 = st.columns(3)
                    col1.metric("YTD", f"{stats['performance']['ytd']:.2%}")
                    col2.metric("Annual Vol", f"{stats['performance']['annual_vol']:.2%}")
                    col3.metric("Sharpe", f"{stats['performance']['sharpe']:.2f}")

                col21, col22 = st.columns(2)

                with col21:
                    with st.expander("–†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏"):
                        st.table(pd.Series(stats['performance']).to_frame("value").rename(metrics_map))

                with col22:
                    with st.expander("–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ IMOEX"):
                        st.table(pd.Series(stats['vs_imoex']).to_frame("value").rename(metrics_map))
            else:
                st.error(r.text)

with tabs[1]:
    st.header("üîÆ–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

    if "securities_df" not in st.session_state or st.session_state["securities_df"].empty:
        st.info("–°–Ω–∞—á–∞–ª–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ ¬´–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä¬ª –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –±—É–º–∞–≥–∏¬ª")

    df_sec = st.session_state["securities_df"]
    if not df_sec.empty:
        st.subheader("–í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –∞–∫—Ü–∏–π")
        picks = st.multiselect(
            "–ë—É–º–∞–≥–∏:",
            options=[f"{row.ID} ‚Äì {row.Name}" for row in df_sec.itertuples()],
        )
        weights = {}
        for p in picks:
            secid = p.split(" ‚Äì ")[0]
            weights[secid] = st.number_input(
                f"{secid} ‚Äî –∫–æ–ª-–≤–æ –∞–∫—Ü–∏–π", min_value=1, value=10, step=1
            )
        model_choice = st.radio(
            "–ê–ª–≥–æ—Ä–∏—Ç–º",
            ["–ë—ã—Å—Ç—Ä–µ–µ (GARCH + CatBoost)", "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ (TFT)"],
            horizontal=True
        )
        model_code = "fast" if model_choice.startswith("–ë—ã—Å—Ç—Ä–µ–µ") else "quality"

        if st.button("–°–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å", disabled=not weights):
            payload = {"assets": [{"secid": s, "shares": n} for s, n in weights.items()],
                       "model": model_code}
            with st.spinner("–û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å..."):
                r = requests.post(f"{BASE}/forecast", json=payload)
            if r.ok:
                data = r.json()
                df_h = pd.DataFrame(data["history"], columns=["date", "value"]).set_index("date")
                df_f = pd.DataFrame(data["forecast"], columns=["date", "value"]).set_index("date")
                df_lo = pd.DataFrame(data["lo95"], columns=["date", "value"]).set_index("date")
                df_hi = pd.DataFrame(data["hi95"], columns=["date", "value"]).set_index("date")

                left, right = st.columns(2)
                left.subheader("–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                left.line_chart(df_h)

                right.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 60 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π")
                base = alt.Chart(df_f.reset_index()).encode(x="date:T")
                band = alt.Chart(
                    pd.concat([df_lo, df_hi], axis=1, keys=["lo", "hi"]).reset_index()
                ).mark_area(opacity=0.2).encode(x="date:T", y="lo:Q", y2="hi:Q")
                line = base.mark_line(color="#1f77b4").encode(y="value:Q")
                right.altair_chart(band + line, use_container_width=True)

                col1, col2, col3 = st.columns(3)
                col1.metric("–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{data['metrics']['annual_volatility']:.2%}")
                col2.metric("VaR 95%", f"{data['metrics']['VaR_95']:.2%}")
                col3.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —á–µ—Ä–µ–∑ 60 –¥–Ω–µ–π", f"{data['metrics']['P_up_60d']:.1%}")
            else:
                st.error(r.text)

            with st.spinner("–°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç..."):
                r = requests.post(f"{BASE}/report", json=payload)
                r.raise_for_status()
                st.session_state.report_bytes = r.content
                st.session_state.report_ready = True

        if st.session_state.report_ready:
            st.download_button(
                "–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
                data=st.session_state.report_bytes,
                file_name="portfolio_report.html",
                mime="text/html",
            )
