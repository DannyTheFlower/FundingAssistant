import streamlit as st, requests, pandas as pd, datetime as dt


BASE = "http://localhost:8000/api"

weightings = {
    "equal": "–†–∞–≤–Ω—ã–µ –≤–µ—Å–∞",
    "market_cap": "–ü–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏",
    "cap_freefloat": "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è √ó Free‚Äëfloat",
    "cap_divyield": "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è √ó –î–∏–≤–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
}
weightings_inv = {v: k for k, v in weightings.items()}

st.set_page_config(page_title="MOEX Index Lab", layout="wide")
tabs = st.tabs(["üõ†Ô∏è–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤", "üîÆ–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"])

with tabs[0]:
    st.title("üìà–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ MOEX")

    st.subheader("–ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å")
    query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é", placeholder="MOEX_Utilities")
    if st.button("üîç –ù–∞–π—Ç–∏"):
        r = requests.get(f"{BASE}/index/indices", params={"q": query})
        if r.ok:
            res_df = pd.DataFrame(r.json())
            if res_df.empty:
                st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                st.dataframe(res_df[["id", "name", "base_date", "weighting"]])
        else:
            st.error(r.text)

    st.markdown("---")

    st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å")

    colY, colQ = st.columns(2)
    Y = colY.number_input("–ì–æ–¥", value=dt.date.today().year, step=1)
    Q = colQ.selectbox("–ö–≤–∞—Ä—Ç–∞–ª", [1, 2, 3, 4], index=0)

    if "securities_df" not in st.session_state:
        st.session_state["securities_df"] = pd.DataFrame(columns=["ID", "Name"])

    if st.button("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –±—É–º–∞–≥‚Ä¶"):
            r = requests.get(f"{BASE}/securities", params={"year": Y, "quarter": Q})
            r.raise_for_status()
            st.session_state["securities_df"] = pd.DataFrame(r.json(), columns=["ID", "Name"])

    if not st.session_state["securities_df"].empty:
        df_sec = st.session_state["securities_df"]
        choices = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–º–∞–≥–∏:",
            options=[f"{row.ID} ‚Äì {row.Name}" for row in df_sec.itertuples()],
        )
        selected_ids = [c.split(" ‚Äì ")[0] for c in choices]

        index_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞", placeholder="My_Dividend_Stars")
        w_type_human = st.selectbox("–¢–∏–ø –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è", list(weightings_inv), 1)
        w_type = weightings_inv[w_type_human]
        base_date = st.date_input("–ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞", value=dt.date(Y, Q * 3 - 2, 1))

        if st.button("–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å üéâ", disabled=not selected_ids):
            payload = {
                "name": index_name,
                "base_date": str(base_date),
                "weighting": w_type,
                "securities": [{"secid": s} for s in selected_ids],
            }
            res = requests.post(f"{BASE}/index", json=payload)
            if res.ok:
                info = res.json()
                st.session_state["index_id"] = info["id"]
                st.success(f"–ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω, ID={info['id']}, –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ={info['base_value']:.2f}")
            else:
                st.error(res.text)

    if "index_id" in st.session_state:
        colF, colT = st.columns(2)
        d_from = colF.date_input("–°", value=dt.date.today() - dt.timedelta(days=30))
        d_till = colT.date_input("–ü–æ", value=dt.date.today())
        if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É"):
            with st.spinner("–†–∞—Å—á—ë—Ç‚Ä¶"):
                s = requests.get(
                    f"{BASE}/index/{st.session_state['index_id']}/series",
                    params={"from": str(d_from), "till": str(d_till)},
                )
                if s.ok and s.json():
                    df = pd.DataFrame(s.json())
                    df["date"] = pd.to_datetime(df["date"])
                    df = df.set_index("date")

                    left, right = st.columns(2)

                    left.subheader(st.session_state.get("index_name", "–í–∞—à –∏–Ω–¥–µ–∫—Å"))
                    left.line_chart(
                        df[["value"]].rename(columns={"value": st.session_state.get("index_name", "index")}),
                        use_container_width=True
                    )

                    right.subheader("IMOEX")
                    right.line_chart(
                        df[["imoex"]].rename(columns={"imoex": "IMOEX"}),
                        use_container_width=True
                    )
                else:
                    st.warning(s.text)

with tabs[1]:
    st.header("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    st.info("–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è GARCH.")
